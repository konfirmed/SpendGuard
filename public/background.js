(()=>{"use strict";const e="purchases",t="totalIntercepts";async function s(e){return(await chrome.storage.local.get(e))[e]}async function a(e,t){await chrome.storage.local.set({[e]:t})}chrome.runtime.onInstalled.addListener((async()=>{console.log("SpendGuard installed â€“ initializing storage"),await a(e,[]),await a(t,0),await a("settings",{cooldownSeconds:30,enableNudges:!0,enableScamDetection:!0})})),chrome.runtime.onMessage.addListener(((n,c,o)=>((async()=>{if("incrementIntercepts"===n.action){const e=(await s(t)||0)+1;await a(t,e),o({success:!0,newCount:e})}if("addPurchase"===n.action){const t=await s(e)||[];t.unshift({...n.purchase,id:Date.now().toString()}),t.length>100&&t.splice(100),await a(e,t),o({success:!0})}})().catch((e=>{console.error("SpendGuard background error:",e),o({success:!1,error:e.message})})),!0)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2dyb3VuZC5qcyIsIm1hcHBpbmdzIjoibUJBRUEsTUFBTUEsRUFBd0IsWUFDeEJDLEVBQXlCLGtCQUkvQkMsZUFBZUMsRUFBV0MsR0FFdEIsYUFEcUJDLE9BQU9DLFFBQVFDLE1BQU1DLElBQUlKLElBQ2hDQSxFQUNsQixDQUlBRixlQUFlTyxFQUFXTCxFQUFLTSxTQUNyQkwsT0FBT0MsUUFBUUMsTUFBTUksSUFBSSxDQUFFLENBQUNQLEdBQU1NLEdBQzVDLENBRUFMLE9BQU9PLFFBQVFDLFlBQVlDLGFBQVlaLFVBQ25DYSxRQUFRQyxJQUFJLHVEQUNOUCxFQUFXVCxFQUF1QixVQUNsQ1MsRUFBV1IsRUFBd0IsU0FDbkNRLEVBQVcsV0FBWSxDQUN6QlEsZ0JBQWlCLEdBQ2pCQyxjQUFjLEVBQ2RDLHFCQUFxQixPQUk3QmQsT0FBT08sUUFBUVEsVUFBVU4sYUFBWSxDQUFDTyxFQUFTQyxFQUFRQyxLQUNuRCxXQUNJLEdBQXVCLHdCQUFuQkYsRUFBUUcsT0FBa0MsQ0FDMUMsTUFDTUMsU0FEaUJ0QixFQUFXRixJQUE0QixHQUNwQyxRQUNwQlEsRUFBV1IsRUFBd0J3QixHQUN6Q0YsRUFBYSxDQUFFRyxTQUFTLEVBQU1DLFNBQVVGLEdBQzVDLENBQ0EsR0FBdUIsZ0JBQW5CSixFQUFRRyxPQUEwQixDQUNsQyxNQUFNSSxRQUFjekIsRUFBV0gsSUFBMkIsR0FDMUQ0QixFQUFLQyxRQUFRLElBQUtSLEVBQVFTLFNBQVVDLEdBQUlDLEtBQUtDLE1BQU1DLGFBQy9DTixFQUFLTyxPQUFTLEtBQ2RQLEVBQUtRLE9BQU8sV0FDVjNCLEVBQVdULEVBQXVCNEIsR0FDeENMLEVBQWEsQ0FBRUcsU0FBUyxHQUM1QixDQUNILEVBZkQsR0FlS1csT0FBTUMsSUFDUHZCLFFBQVF3QixNQUFNLGlDQUFrQ0QsR0FDaERmLEVBQWEsQ0FBRUcsU0FBUyxFQUFPYSxNQUFPRCxFQUFJakIsY0FHdkMsSSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYmFzc2lzdGFudC8uL3NyYy9iYWNrZ3JvdW5kL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gc3JjL2JhY2tncm91bmQvaW5kZXgudHNcbmNvbnN0IFNUT1JBR0VfS0VZX1BVUkNIQVNFUyA9ICdwdXJjaGFzZXMnO1xuY29uc3QgU1RPUkFHRV9LRVlfSU5URVJDRVBUUyA9ICd0b3RhbEludGVyY2VwdHMnO1xuLyoqXG4gKiBBc3luYyB3cmFwcGVyIGFyb3VuZCBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXRcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0U3RvcmFnZShrZXkpIHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoa2V5KTtcbiAgICByZXR1cm4gcmVzdWx0W2tleV07XG59XG4vKipcbiAqIEFzeW5jIHdyYXBwZXIgYXJvdW5kIGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldFxuICovXG5hc3luYyBmdW5jdGlvbiBzZXRTdG9yYWdlKGtleSwgdmFsdWUpIHtcbiAgICBhd2FpdCBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoeyBba2V5XTogdmFsdWUgfSk7XG59XG4vLyBPbiBpbnN0YWxsLCBpbml0aWFsaXplIG91ciBzdG9yYWdlIGtleXNcbmNocm9tZS5ydW50aW1lLm9uSW5zdGFsbGVkLmFkZExpc3RlbmVyKGFzeW5jICgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnV2ViQXNzaXN0YW50IGluc3RhbGxlZCDigJMgaW5pdGlhbGl6aW5nIHN0b3JhZ2UnKTtcbiAgICBhd2FpdCBzZXRTdG9yYWdlKFNUT1JBR0VfS0VZX1BVUkNIQVNFUywgW10pO1xuICAgIGF3YWl0IHNldFN0b3JhZ2UoU1RPUkFHRV9LRVlfSU5URVJDRVBUUywgMCk7XG4gICAgYXdhaXQgc2V0U3RvcmFnZSgnc2V0dGluZ3MnLCB7XG4gICAgICAgIGNvb2xkb3duU2Vjb25kczogMzAsXG4gICAgICAgIGVuYWJsZU51ZGdlczogdHJ1ZSxcbiAgICAgICAgZW5hYmxlU2NhbURldGVjdGlvbjogdHJ1ZSxcbiAgICB9KTtcbn0pO1xuLy8gSGFuZGxlIG1lc3NhZ2VzIGZyb20gY29udGVudCBzY3JpcHRzXG5jaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKG1lc3NhZ2UsIHNlbmRlciwgc2VuZFJlc3BvbnNlKSA9PiB7XG4gICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYWN0aW9uID09PSAnaW5jcmVtZW50SW50ZXJjZXB0cycpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSAoYXdhaXQgZ2V0U3RvcmFnZShTVE9SQUdFX0tFWV9JTlRFUkNFUFRTKSkgfHwgMDtcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWQgPSBjdXJyZW50ICsgMTtcbiAgICAgICAgICAgIGF3YWl0IHNldFN0b3JhZ2UoU1RPUkFHRV9LRVlfSU5URVJDRVBUUywgdXBkYXRlZCk7XG4gICAgICAgICAgICBzZW5kUmVzcG9uc2UoeyBzdWNjZXNzOiB0cnVlLCBuZXdDb3VudDogdXBkYXRlZCB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5hY3Rpb24gPT09ICdhZGRQdXJjaGFzZScpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3QgPSAoYXdhaXQgZ2V0U3RvcmFnZShTVE9SQUdFX0tFWV9QVVJDSEFTRVMpKSB8fCBbXTtcbiAgICAgICAgICAgIGxpc3QudW5zaGlmdCh7IC4uLm1lc3NhZ2UucHVyY2hhc2UsIGlkOiBEYXRlLm5vdygpLnRvU3RyaW5nKCkgfSk7XG4gICAgICAgICAgICBpZiAobGlzdC5sZW5ndGggPiAxMDApXG4gICAgICAgICAgICAgICAgbGlzdC5zcGxpY2UoMTAwKTtcbiAgICAgICAgICAgIGF3YWl0IHNldFN0b3JhZ2UoU1RPUkFHRV9LRVlfUFVSQ0hBU0VTLCBsaXN0KTtcbiAgICAgICAgICAgIHNlbmRSZXNwb25zZSh7IHN1Y2Nlc3M6IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICB9KSgpLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1dlYkFzc2lzdGFudCBiYWNrZ3JvdW5kIGVycm9yOicsIGVycik7XG4gICAgICAgIHNlbmRSZXNwb25zZSh7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyLm1lc3NhZ2UgfSk7XG4gICAgfSk7XG4gICAgLy8gUmV0dXJuIHRydWUgdG8ga2VlcCB0aGUgbWVzc2FnZSBjaGFubmVsIG9wZW4gZm9yIGFzeW5jIHJlc3BvbnNlXG4gICAgcmV0dXJuIHRydWU7XG59KTtcbiJdLCJuYW1lcyI6WyJTVE9SQUdFX0tFWV9QVVJDSEFTRVMiLCJTVE9SQUdFX0tFWV9JTlRFUkNFUFRTIiwiYXN5bmMiLCJnZXRTdG9yYWdlIiwia2V5IiwiY2hyb21lIiwic3RvcmFnZSIsImxvY2FsIiwiZ2V0Iiwic2V0U3RvcmFnZSIsInZhbHVlIiwic2V0IiwicnVudGltZSIsIm9uSW5zdGFsbGVkIiwiYWRkTGlzdGVuZXIiLCJjb25zb2xlIiwibG9nIiwiY29vbGRvd25TZWNvbmRzIiwiZW5hYmxlTnVkZ2VzIiwiZW5hYmxlU2NhbURldGVjdGlvbiIsIm9uTWVzc2FnZSIsIm1lc3NhZ2UiLCJzZW5kZXIiLCJzZW5kUmVzcG9uc2UiLCJhY3Rpb24iLCJ1cGRhdGVkIiwic3VjY2VzcyIsIm5ld0NvdW50IiwibGlzdCIsInVuc2hpZnQiLCJwdXJjaGFzZSIsImlkIiwiRGF0ZSIsIm5vdyIsInRvU3RyaW5nIiwibGVuZ3RoIiwic3BsaWNlIiwiY2F0Y2giLCJlcnIiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=